<?require_once '../classes/_Var.php';$Var        =_Var::getInstance();  $Var->__autoload("Script","Text","Data"); $Script=Script::getInstance();$Text=Text::getInstance();$Data=Data::getInstance();$Script->object("Text");$Script->attribute("SELECTED            : '".$Text->setLabel("MSG_SELECTED")."',");$Script->attribute("GREATER_OR_EQUAL_TO : '".$Text->setLabel("MSG_GREATER_OR_EQUAL_TO")."',");$Script->attribute("LESS_OR_EQUAL_TO    : '".$Text->setLabel("MSG_LESS_OR_EQUAL_TO")."',");$Script->attribute("LESS_TO            : '".$Text->setLabel("MSG_LESS_TO")."',");$Script->attribute("VALIDATE_REQUIRED   : '".$Text->setLabel("MSG_VALIDATE_REQUIRED")."',");$Script->attribute("VALIDATE_DATE       : '".$Text->setLabel("MSG_VALIDATE_DATE")."',");$Script->attribute("VALIDATE_EMAIL      : '".$Text->setLabel("MSG_VALIDATE_EMAIL")."',");$Script->attribute("VALIDATE_DIGITS     : '".$Text->setLabel("MSG_VALIDATE_DIGITS")."',");$Script->attribute("CONFIRM             : '".$Text->setLabel("MSG_CONFIRM")."',");$Script->attribute("DATA_SAVE           : '".$Text->setLabel("MSG_DATA_SAVE")."',");$Script->attribute("BEGING_PROCESS      : '".$Text->setLabel("MSG_BEGING_PROCESS")."',");$Script->attribute("TYPING              : '".$Text->setLabel("MSG_TYPING")."',");$Script->attribute("CLRMX               : '".$Data->getParameter("CLR_MAX")."',");$Script->attribute("CLRMN               : '".$Data->getParameter("CLR_MIN")."',");$Script->attribute("CLRTM               : '".$Data->getParameter("CLR_TIME")."',");$Script->method("sprintf","",                "if(!arguments || arguments.length < 1 || !RegExp)                	 	   return;                	 	                   	 var str = arguments[0];                	 var re = /([^%]*)%('.|0|\x20)?(-)?(\d+)?(\.\d+)?(%|b|c|d|u|f|o|s|x|X)(.*)/;                	 var a = b = [], numSubstitutions = 0, numMatches = 0;                	                    while(a = re.exec(str)){                		     var leftpart = a[1], pPad = a[2], pJustify = a[3], pMinLength = a[4];                		     var pPrecision = a[5], pType = a[6], rightPart = a[7];                		     numMatches++;                		                     		     if(pType == '%'){                			       subst = '%';                		         }                              else{                			           numSubstitutions++;                			           if(numSubstitutions >= arguments.length) {                				            alert('Error! Not enough function arguments (' + (arguments.length - 1) + ', excluding the string), for the number of substitution parameters in string (' + numSubstitutions + ' so far).');                			             }/*End if*/                			                                           	 var param = arguments[numSubstitutions];                              	 var pad = '';                              	                                  if(pPad && pPad.substr(0,1) == '\"')                                    pad = leftpart.substr(1,1);                              	    else if(pPad)                                             pad = pPad;                              			                                 var justifyRight = true;                              	                                  if(pJustify && pJustify === '-')                                     justifyRight = false;                              			                                    var minLength = -1;                              			                                 if(pMinLength)                                     minLength = parseInt(pMinLength);                              			                                 var precision = -1;                              	                                  if (pPrecision && pType == 'f')                                      precision = parseInt(pPrecision.substring(1));                              			                                 var subst = param;                              	                                  if(pType == 'b')                                     subst = parseInt(param).toString(2);                              			else if(pType == 'c')                                             subst = String.fromCharCode(parseInt(param));                              			else if(pType == 'd')                                             subst = parseInt(param) ? parseInt(param) : 0;                              			else if(pType == 'u')                                             subst = Math.abs(param);                              			else if(pType == 'f')                                             subst = (precision > -1) ? Math.round(parseFloat(param) * Math.pow(10, precision)) / Math.pow(10, precision): parseFloat(param);                              			else if(pType == 'o')                                            subst = parseInt(param).toString(8);                              			else if(pType == 's')                                            subst = param;                              			else if(pType == 'x')                                            subst = ('' + parseInt(param).toString(16)).toLowerCase();                              			else if(pType == 'X')                                            subst = ('' + parseInt(param).toString(16)).toUpperCase();                		            }/*End else*/                		     str = leftpart + subst + rightPart;                	       }/*End while*/                	return str;",true);	$Script->method("hide","name",                '$("#"+name+"").hide();',true);$Script->method("show","name",                '$("#"+name+"").show();',true);							$Script->method("print","name,hidden",                'Text.hide(hidden);$("#"+name+"").printArea();Text.show(hidden);',true);$Script->method("justify","name",                '$("#"+name+"").css("text-align","justify");',true);$Script->method("opacity","name",                '$("#"+name+"").css("opacity","0.5");',true);				$Script->method("highLight","name",                'setInterval(function() {Data.highLight(name,Text.CLRMX,Text.CLRTM);Data.highLight(name,Text.CLRMN,Text.CLRTM);}, Text.CLRTM);				',true);				$Script->method("line","name,label",                'var lbk=$("#"+name+"").val();$("#"+name+"").keypress(function(e){ if(e.which==13)$("#"+name+"").val(lbk+label);});',true);		$Script->method("clean","name",                'return (name).replace(/^\s+/, "");');					$Script->endObject();$Var->release($Script,$Text,$Data,$Var);                     ?>